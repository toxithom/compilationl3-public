iter num = 28
use = () def = ()	in = (6 9 )	 	out = (6 9 )	 		call	main	;
use = () def = (2 )	in = (6 9 )	 	out = (6 9 )	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (3 )	in = (6 9 )	 	out = (6 9 )	 		mov	eax,	1	;
use = () def = ()	in = (6 9 )	 	out = (6 9 )	 		int 0x80	;
use = () def = ()	in = (6 9 )	 	out = (6 9 )	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = (6 9 )	 	out = (6 9 )	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = (6 9 )	 	out = (6 9 )	 		sub	esp,	0	;allocation des variables locales
use = () def = (4 )	in = (6 9 )	 	out = (6 9 )	 		mov	eax,	20	;
use = () def = (5 )	in = (6 9 )	 	out = (5 6 9 )	 		mov	r5,	5	;
use = (5 ) def = ()	in = (5 6 9 )	 	out = (6 9 )	 		idiv	r5	;
use = (6 ) def = (0 )	in = (6 9 )	 	out = (0 9 )	 		mov	r0,	eax	;
use = (0 ) def = (7 )	in = (0 9 )	 	out = (9 )	 		mov	eax,	r0	;
use = () def = (8 )	in = (9 )	 	out = (8 9 )	 		mov	r8,	2	;
use = (8 ) def = ()	in = (8 9 )	 	out = (9 )	 		idiv	r8	;
use = (9 ) def = (1 )	in = (9 )	 	out = (1 )	 		mov	r1,	eax	;
use = (1 ) def = (10 )	in = (1 )	 	out = ()	 		mov	eax,	r1	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;dÃ©sallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
