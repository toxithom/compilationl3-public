iter num = 5
use = () def = ()	in = ()	 	out = ()	 		call	main	;
use = () def = (1 )	in = ()	 	out = ()	 		mov	ebx,	0	; valeur de retour du programme
use = () def = (2 )	in = ()	 	out = ()	 		mov	eax,	1	;
use = () def = ()	in = ()	 	out = ()	 		int 0x80	;
use = () def = ()	in = ()	 	out = ()	 	main :	push	ebp	;sauvegarde la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		mov	ebp,	esp	;nouvelle valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		sub	esp,	0	;allocation des variables locales
use = () def = (3 )	in = ()	 	out = (3 )	 		mov	r3,	1	;jumpIfNotEqual 1
use = (3 ) def = ()	in = (3 )	 	out = ()	 		cmp	r3,	0	;on passe par un registre temporaire
use = () def = ()	in = ()	 	out = ()	 		jne	l1	;jumpIfNotEqual 2
use = () def = (4 )	in = ()	 	out = (4 )	 		mov	r4,	1	;jumpIfNotEqual 1
use = (4 ) def = ()	in = (4 )	 	out = ()	 		cmp	r4,	0	;on passe par un registre temporaire
use = () def = ()	in = ()	 	out = ()	 		jne	l1	;jumpIfNotEqual 2
use = () def = (0 )	in = ()	 	out = (0 )	 		mov	r0,	0	;Affect
use = () def = ()	in = (0 )	 	out = (0 )	 		jmp	l0	;Jump
use = () def = (0 )	in = ()	 	out = (0 )	 	l1 :	mov	r0,	1	;Affect
use = (0 ) def = (5 )	in = (0 )	 	out = ()	 	l0 :	mov	eax,	r0	;Write 1
use = () def = ()	in = ()	 	out = ()	 		call	iprintLF	;Write 2
use = () def = ()	in = ()	 	out = ()	 		add	esp,	0	;d√©sallocation des variables locales
use = () def = ()	in = ()	 	out = ()	 		pop	ebp	;restaure la valeur de ebp
use = () def = ()	in = ()	 	out = ()	 		ret	;
